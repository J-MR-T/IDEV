package com.github.amnonya.hdleditor.vhdl.psi;

import com.intellij.psi.tree.*;

import static com.github.amnonya.hdleditor.vhdl.psi.VhdlTypes.*;

public class VhdlElementTypes {
    public static final TokenSet DECLARATIONS = TokenSet.create(
            ALIAS_DECLARATION, ATTRIBUTE_DECLARATION, COMPONENT_DECLARATION, CONSTANT_DECLARATION,
            SIGNAL_DECLARATION, VARIABLE_DECLARATION, FILE_DECLARATION,
            INTERFACE_GENERIC_DECLARATION, INTERFACE_PORT_DECLARATION,
            ELEMENT_DECLARATION, FULL_TYPE_DECLARATION, INCOMPLETE_TYPE_DECLARATION, SUBTYPE_DECLARATION,

            SUBPROGRAM_DECLARATION, SUBPROGRAM_BODY, FUNCTION_PARAMETER_CONSTANT_DECLARATION,
            FUNCTION_PARAMETER_SIGNAL_DECLARATION, PROCEDURE_PARAMETER_CONSTANT_DECLARATION,
            PROCEDURE_PARAMETER_SIGNAL_DECLARATION, PROCEDURE_PARAMETER_VARIABLE_DECLARATION,
            SUBPROGRAM_PARAMETER_FILE_DECLARATION
    );
    public static final TokenSet STATEMENTS = TokenSet.create(
            ASSERTION_STATEMENT, REPORT_STATEMENT, BLOCK_STATEMENT, CASE_STATEMENT, CASE_STATEMENT_ALTERNATIVE,
            COMPONENT_INSTANTIATION_STATEMENT, CONCURRENT_ASSERTION_STATEMENT, CONCURRENT_PROCEDURE_CALL_STATEMENT,
            CONCURRENT_SIGNAL_ASSIGNMENT_STATEMENT, EXIT_STATEMENT, GENERATE_STATEMENT, IF_STATEMENT,
            LOOP_STATEMENT, NEXT_STATEMENT, NULL_STATEMENT, PROCEDURE_CALL_STATEMENT, PROCESS_STATEMENT,
            RETURN_STATEMENT, SIGNAL_ASSIGNMENT_STATEMENT, VARIABLE_ASSIGNMENT_STATEMENT, WAIT_STATEMENT
    );
    public static final TokenSet KEYWORDS = TokenSet.create(
            T_ASSERT, T_SEVERITY, T_REPORT, T_NULL, T_IF,
            T_THEN, T_ELSIF, T_ELSE, T_FOR, T_WHILE, T_LOOP,
            T_NEXT, T_EXIT, T_GENERATE, T_SELECT, T_WITH,
            T_CASE, T_WHEN, T_UNAFFECTED, T_LIBRARY, T_USE,
            T_ALL, T_ARCHITECTURE, T_CONFIGURATION, T_ENTITY,
            T_POSTPONED, T_PROCESS, T_PACKAGE, T_BODY, T_DISCONNECT,
            T_GUARDED, T_BLOCK, T_COMPONENT, T_FUNCTION, T_IMPURE,
            T_PURE, T_PROCEDURE, T_RETURN, T_BUFFER, T_IN,
            T_INOUT, T_LINKAGE, T_OUT, T_ARRAY, T_ACCESS,
            T_CONSTANT, T_FILE, T_NEW, T_SIGNAL, T_SHARED,
            T_SUBTYPE, T_RANGE, T_RECORD, T_TYPE, T_UNITS,
            T_OTHERS, T_DOWNTO, T_TO, T_VARIABLE, T_GENERIC,
            T_PORT, T_MAP, T_OPEN, T_ATTRIBUTE, T_ALIAS,
            T_LABEL, T_BUS, T_REGISTER, T_GROUP, T_LITERAL,
            T_AFTER, T_INERTIAL, T_REJECT, T_TRANSPORT, T_UNTIL,
            T_WAIT, T_BEGIN, T_END, T_IS, T_OF, T_ON
    );
    public static final TokenSet ADDITIVE_OPERATORS = TokenSet.create(T_ADD, T_SUB, T_CONCAT);
    public static final TokenSet ASSIGNMENT_OPERATORS = TokenSet.create(T_LE, T_BLOCKING_ASSIGNMENT, T_MAP_ASSIGNMENT);
    public static final TokenSet EQUALITY_OPERATORS = TokenSet.create(
            T_EQ, T_NE,
            // VHDL 2008 Operators:
            T_QQ, T_QE, T_QNE
    );
    public static final TokenSet LOGICAL_OPERATORS = TokenSet.create(
            T_NOT, T_AND, T_OR, T_NAND, T_NOR, T_XOR, T_XNOR
    );
    public static final TokenSet MULTIPLICATIVE_OPERATORS = TokenSet.create(T_EXP, T_MUL, T_DIV);
    public static final TokenSet MULTIPLICATIVE_WORD_OPERATORS = TokenSet.create(T_ABS, T_MOD, T_REM);
    public static final TokenSet RELATIONAL_OPERATORS = TokenSet.create(
            T_LT, T_GT, T_GE,
            // VHDL 2008 Operators:
            T_QLT, T_QLE, T_QGT, T_QGE
    );
    public static final TokenSet SHIFT_OPERATORS = TokenSet.create(
            T_ROL, T_ROR, T_SLA, T_SLL, T_SRA, T_SRL
    );
    public static final TokenSet OPERATORS = TokenSet.orSet(
            ADDITIVE_OPERATORS, ASSIGNMENT_OPERATORS, EQUALITY_OPERATORS, LOGICAL_OPERATORS, RELATIONAL_OPERATORS,
            MULTIPLICATIVE_OPERATORS, MULTIPLICATIVE_WORD_OPERATORS, SHIFT_OPERATORS
    );
    public static final TokenSet OPERATORS_2 = TokenSet.create(T_APOSTROPHE);
    public static final TokenSet PARENTHESES = TokenSet.create(T_LEFT_PAREN, T_RIGHT_PAREN);
    public static final TokenSet SEMICOLONS = TokenSet.create(T_COLON, T_SEMICOLON);
}
